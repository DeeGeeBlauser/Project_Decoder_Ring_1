// const substitutionModule = (function () {
//   const originalAlphabet = abcdefghijklmnopqrstuvwxyz.split('')
//   //helper function to determine alphabet parameter is present, exactly 26 characters
//   //and contains unique characters
//   function _alphabetChecker(alphabet) {
//     if (!alphabet || alphabet.length != 26) return false;
//     const alphabetArray = alphabet.split("");
//     uniqueArray = [];
//     for (let i = 0; i < alphabetArray.length; i++) {
//       let value = alphabetArray[i];
//       if (uniqueArray.includes(alphabetArray[i])) {
//         return false;
//       } else {
//         uniqueArray.push(alphabetArray[i]);
//       }
//     }
//     return true;
//   }
//   function _encoder(input, alphabet) {
//     for (let letter in alphabet) {
//     originalAlphabet[letter] = alphabet[letter] 
//     }
//   }
//   function substitution(input, alphabet, encode = true) {
//     if (!_alphabetChecker(alphabet)) return false;
//   }
//   return {
//     substitution,
//   };
// })();
// module.exports = { substitution: substitutionModule.substitution };
function cov_1ry4frty5g(){var path="/Users/derekblauser/Desktop/Thinkful/qualified-challenges/Project_Decoder_Ring_1/src/substitution.js";var hash="efe7e4bf4fa07f16311b0d387f70194c0afd2d7d";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/derekblauser/Desktop/Thinkful/qualified-challenges/Project_Decoder_Ring_1/src/substitution.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"efe7e4bf4fa07f16311b0d387f70194c0afd2d7d"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_1ry4frty5g=function(){return actualCoverage;};}return actualCoverage;}cov_1ry4frty5g();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN1YnN0aXR1dGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTt3ckJBckJZIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uc3Qgc3Vic3RpdHV0aW9uTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcbi8vICAgY29uc3Qgb3JpZ2luYWxBbHBoYWJldCA9IGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LnNwbGl0KCcnKVxuICBcbi8vICAgLy9oZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGFscGhhYmV0IHBhcmFtZXRlciBpcyBwcmVzZW50LCBleGFjdGx5IDI2IGNoYXJhY3RlcnNcbi8vICAgLy9hbmQgY29udGFpbnMgdW5pcXVlIGNoYXJhY3RlcnNcbi8vICAgZnVuY3Rpb24gX2FscGhhYmV0Q2hlY2tlcihhbHBoYWJldCkge1xuLy8gICAgIGlmICghYWxwaGFiZXQgfHwgYWxwaGFiZXQubGVuZ3RoICE9IDI2KSByZXR1cm4gZmFsc2U7XG4vLyAgICAgY29uc3QgYWxwaGFiZXRBcnJheSA9IGFscGhhYmV0LnNwbGl0KFwiXCIpO1xuLy8gICAgIHVuaXF1ZUFycmF5ID0gW107XG4vLyAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbHBoYWJldEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4vLyAgICAgICBsZXQgdmFsdWUgPSBhbHBoYWJldEFycmF5W2ldO1xuLy8gICAgICAgaWYgKHVuaXF1ZUFycmF5LmluY2x1ZGVzKGFscGhhYmV0QXJyYXlbaV0pKSB7XG4vLyAgICAgICAgIHJldHVybiBmYWxzZTtcbi8vICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIHVuaXF1ZUFycmF5LnB1c2goYWxwaGFiZXRBcnJheVtpXSk7XG4vLyAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHJldHVybiB0cnVlO1xuLy8gICB9XG5cbi8vICAgZnVuY3Rpb24gX2VuY29kZXIoaW5wdXQsIGFscGhhYmV0KSB7XG4vLyAgICAgZm9yIChsZXQgbGV0dGVyIGluIGFscGhhYmV0KSB7XG4vLyAgICAgb3JpZ2luYWxBbHBoYWJldFtsZXR0ZXJdID0gYWxwaGFiZXRbbGV0dGVyXSBcbi8vICAgICB9XG5cbi8vICAgfVxuXG4vLyAgIGZ1bmN0aW9uIHN1YnN0aXR1dGlvbihpbnB1dCwgYWxwaGFiZXQsIGVuY29kZSA9IHRydWUpIHtcbi8vICAgICBpZiAoIV9hbHBoYWJldENoZWNrZXIoYWxwaGFiZXQpKSByZXR1cm4gZmFsc2U7XG5cbi8vICAgfVxuLy8gICByZXR1cm4ge1xuLy8gICAgIHN1YnN0aXR1dGlvbixcbi8vICAgfTtcbi8vIH0pKCk7XG5cbi8vIG1vZHVsZS5leHBvcnRzID0geyBzdWJzdGl0dXRpb246IHN1YnN0aXR1dGlvbk1vZHVsZS5zdWJzdGl0dXRpb24gfTtcbiJdfQ==